import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from pdfminer.high_level import extract_text
import os
import json
import chardet

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)


summarized_text = None
questions = []  # c–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
user_answers = {}  # –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ Ollama API
def ask_ollama(prompt, max_tokens=4000):
    url = "https://sickeningly-meteoric-gallinule.cloudpub.ru/generate" # API –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –ø–µ—Ä–µ–¥–∞—ë—Ç –∑–∞–ø—Ä–æ—Å
    headers = {
        "Content-Type": "application/json"
    }
    payload = {
        "model": "deepseek-coder-v2",
        "prompt": prompt[:1000],  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        "stream": False,
        "max_tokens": max_tokens
    }
    try:
        response = requests.post(url, headers=headers, json=payload, timeout=30)
        response.raise_for_status()
        return response.json()["response"]
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama API: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –î–µ—Ç–∞–ª–∏: {str(e)}"

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def send_long_response(update: Update, response: str, max_length=4096):
    for i in range(0, len(response), max_length):
        await update.message.reply_text(response[i:i + max_length])

# –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
def extract_text_from_file(file_path, file_type):
    try:
        if file_type == "txt":
            encoding = detect_encoding(file_path)
            with open(file_path, 'r', encoding=encoding) as file:
                return file.read()
        elif file_type == "pdf":
            return extract_text(file_path)
        else:
            raise ValueError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞: {e}")
        raise

# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ —Ñ–∞–π–ª–∞
def detect_encoding(file_path):
    with open(file_path, 'rb') as file:
        raw_data = file.read()
        result = chardet.detect(raw_data)
        return result['encoding']

# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global summarized_text, questions, user_answers
    summarized_text = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
    questions = []  # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    user_answers = {}  # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (txt –∏–ª–∏ pdf) –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∏ —è —Å–¥–µ–ª–∞—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑.'
    )

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global summarized_text, questions, user_answers
    user_text = update.message.text

    # –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
    if "question_id" in context.user_data:
        question_id = context.user_data["question_id"]
        user_answers[question_id] = user_text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        question = questions[question_id]["question"]
        correct_answer = questions[question_id]["answer"]
        prompt = (
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –≤–æ–ø—Ä–æ—Å: '{question}'. "
            f"–ï–≥–æ –æ—Ç–≤–µ—Ç: '{user_text}'. "
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct_answer}'. "
            f"–û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–∞–ø–∏—à–∏ '‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!'. "
            f"–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –Ω–∞–ø–∏—à–∏ '‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: [–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç]'."
        )
        bot_response = ask_ollama(prompt, max_tokens=1000)
        await update.message.reply_text(bot_response)

        # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –∑–∞–¥–∞—ë–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        if "‚úÖ" in bot_response:
            next_question_id = question_id + 1
            if next_question_id < len(questions):
                await send_question(update, context, next_question_id)
            else:
                await update.message.reply_text("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–π–¥–µ–Ω—ã! üéâ")
                del context.user_data["question_id"]  
        else:
            # –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º –≤–æ–ø—Ä–æ—Å–µ
            await send_question(update, context, question_id)
        return

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞
    prompt = (
        f"–°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å, —Ç–æ–Ω –∏ –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞. "
        f"–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —Å—é–∂–µ—Ç, –æ–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏—Ö –º–æ—Ç–∏–≤–∞—Ü–∏—é. "
        f"–£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–µ—Ä–µ—Å–∫–∞–∑ –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥—É—Ö –æ—Ä–∏–≥–∏–Ω–∞–ª–∞. "
        f"–¢–µ–∫—Å—Ç: {user_text}"
    )

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Ollama API
    bot_response = ask_ollama(prompt, max_tokens=4000)
    summarized_text = bot_response  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ—Å–∫–∞–∑

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await send_long_response(update, bot_response)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ", callback_data="check_understanding")],
        [InlineKeyboardButton("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="new_text")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)

# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global summarized_text, questions, user_answers
    file_path = None
    try:
        file = await update.message.document.get_file()
        file_path = f"temp_{update.message.document.file_name}"
        await file.download_to_drive(file_path)

        # –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø —Ñ–∞–π–ª–∞
        file_type = file_path.split('.')[-1].lower()
        if file_type not in ["txt", "pdf"]:
            await update.message.reply_text("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt –∏–ª–∏ pdf.")
            return

        # –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
        text = extract_text_from_file(file_path, file_type)
        logger.info(f"–¢–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞: {text[:100]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤

        
        chapters = split_into_chapters(text)
        summarized_parts = []
        previous_context = ""  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤

        for chapter in chapters:
            prompt = (
                f"–°–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ —ç—Ç–æ–π –≥–ª–∞–≤—ã, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å, —Ç–æ–Ω –∏ –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞. "
                f"–ü–µ—Ä–µ—Å–∫–∞–∂–∏ —Å—é–∂–µ—Ç, –æ–ø–∏—à–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è, –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏—Ö –º–æ—Ç–∏–≤–∞—Ü–∏—é. "
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≥–ª–∞–≤: {previous_context}\n\n"
                f"–¢–µ–∫—Å—Ç –≥–ª–∞–≤—ã: {chapter}"
            )
            bot_response = ask_ollama(prompt, max_tokens=4000)
            summarized_parts.append(bot_response)
            previous_context = bot_response  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥–ª–∞–≤—ã

        
        summarized_text = "\n\n".join(summarized_parts)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_long_response(update, summarized_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–Ω–∏–º–∞–Ω–∏–µ", callback_data="check_understanding")],
            [InlineKeyboardButton("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç", callback_data="new_text")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    finally:

        if file_path and os.path.exists(file_path):
            os.remove(file_path)


def split_into_chapters(text):
    chapters = []
    current_chapter = ""
    for line in text.splitlines():
        if line.strip().startswith("–ì–ª–∞–≤–∞"):
            if current_chapter:
                chapters.append(current_chapter)
            current_chapter = line + "\n"
        else:
            current_chapter += line + "\n"
    if current_chapter:
        chapters.append(current_chapter)
    return chapters

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global summarized_text, questions, user_answers
    query = update.callback_query
    await query.answer()

    if query.data == "check_understanding":
        if summarized_text:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è
            prompt = f"–ó–∞–¥–∞–π 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏ —É–∫–∞–∂–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. –¢–µ–∫—Å—Ç: {summarized_text}"
            bot_response = ask_ollama(prompt, max_tokens=2000)

            # –ü–∞—Ä—Å–∏–º –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã
            questions = parse_questions_and_answers(bot_response)
            if questions:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                await send_question(update, context, 0)
            else:
                await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        else:
            await query.edit_message_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    elif query.data == "new_text":
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é start –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await start(update, context)

# –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_id: int):
    if question_id < len(questions):
        question = questions[question_id]["question"]
        context.user_data["question_id"] = question_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
        await update.callback_query.message.reply_text(f"–í–æ–ø—Ä–æ—Å {question_id + 1}: {question}")
    else:
        await update.callback_query.message.reply_text("–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! üéâ")

# –ø–∞—Ä—Å–∏–Ω–≥ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
def parse_questions_and_answers(text):
    questions = []
    lines = text.splitlines()
    for i in range(0, len(lines), 2):
        if i + 1 < len(lines):
            question = lines[i].strip()
            answer = lines[i + 1].strip()
            questions.append({"question": question, "answer": answer})
    return questions


def main():
    # API-—Ç–æ–∫–µ–Ω —Ç–≥ –±–æ—Ç–∞
    token = "7611506314:AAEuZmc-RG5nLAuMjfmZS0qdtPmLXE86fxo"

    # —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(token).build()

    # —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()
